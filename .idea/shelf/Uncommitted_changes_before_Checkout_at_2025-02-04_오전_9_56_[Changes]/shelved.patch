Index: app/src/main/java/com/example/frume/repository/ReviewRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frume.repository\r\n\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport com.example.frume.data.MyReviewParent\r\nimport com.example.frume.vo.ReviewVO\r\nimport com.google.firebase.Firebase\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.storage.storage\r\nimport kotlinx.coroutines.tasks.await\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\n\r\nclass ReviewRepository {\r\n    companion object {\r\n        // 유저 후기 저장하기\r\n        suspend fun setUserReview(reviewVO: ReviewVO): String {\r\n            val fireStore = FirebaseFirestore.getInstance()\r\n            val collectionReference = fireStore.collection(\"reviewData\")\r\n            val documentReference = collectionReference.document()\r\n            reviewVO.reviewDocId = documentReference.id\r\n            documentReference.set(reviewVO)\r\n            return reviewVO.reviewDocId\r\n\r\n\r\n        }\r\n\r\n        // 이미지 저장하기\r\n        suspend fun setUserReviewImg(uris: MutableList<Uri?>): MutableList<String> {\r\n            val storage = Firebase.storage\r\n            val storageRef = storage.getReference(\"review_img\")\r\n            val uploadedUrls = mutableListOf<String>()\r\n            for (uri in uris) {\r\n                val fileName = SimpleDateFormat(\"yyyyMMddHHmmss\").format(Date())\r\n                val imageRef = storageRef.child(\"${fileName}.png\")\r\n\r\n                try {\r\n                    if (uri != null) {\r\n                        imageRef.putFile(uri).await()\r\n                    }\r\n                    val downloadUrl = imageRef.downloadUrl.await()\r\n                    uploadedUrls.add(downloadUrl.toString())\r\n                } catch (_: Exception) {\r\n\r\n                }\r\n            }\r\n            return uploadedUrls\r\n        }\r\n\r\n        suspend fun getMyReviewCount(userDocId: String): Int {\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"reviewData\")\r\n\r\n            return try {\r\n                val reviewSnapshot = collectionReference\r\n                    .whereEqualTo(\"reviewCustomerDocId\", userDocId) // 특정 유저의 리뷰만 필터링\r\n                    .orderBy(\"reviewTimeStamp\", Query.Direction.DESCENDING)\r\n                    .get()\r\n                    .await()\r\n\r\n                // 문서 개수를 로그로 출력\r\n                Log.d(\"Firestore\", \"문서 개수: ${reviewSnapshot.documents.size}\")\r\n                reviewSnapshot.documents.size // 문서 개수 반환\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                0 // 오류 발생 시 0 반환\r\n            }\r\n        }\r\n\r\n\r\n        // 내가 작성한 특정 상품에 대한 후기 수 가져오기\r\n        suspend fun getMyReviewCountByProduct(productDocId: String, userId: String): Int {\r\n\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"reviewData\")\r\n\r\n            return try {\r\n                val reviewSnapshot = collectionReference\r\n                    .whereEqualTo(\"reviewProductDocId\", productDocId)\r\n                    .whereEqualTo(\"reviewCustomerDocId\", userId)\r\n                    .get()\r\n                    .await()\r\n\r\n                Log.d(\"test333\", \"사용자($userId)가 작성한 후기 수: ${reviewSnapshot.documents.size}\")\r\n\r\n                reviewSnapshot.documents.size // 후기 수 반환\r\n\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                0 // 오류 시 0 반환\r\n            }\r\n\r\n        }\r\n\r\n        // 이 상품을 내가 주문한 횟수 가져오기\r\n        suspend fun getMyOrderCountByProduct(productDocId: String, userId: String): Int {\r\n\r\n            val firestore = FirebaseFirestore.getInstance()\r\n            val collectionReference = firestore.collection(\"orderData\")\r\n            var orderCount = 0\r\n\r\n            try {\r\n                // 사용자의 모든 주문 가져오기\r\n                val orderSnapshot = collectionReference\r\n                    .whereEqualTo(\"orderCustomerDocId\", userId)  // 사용자 필터링\r\n                    .get()\r\n                    .await()\r\n\r\n                for (orderDocument in orderSnapshot.documents) {\r\n                    // 각 주문의 orderProductItems 컬렉션 확인\r\n                    val orderProductItemsRef = orderDocument.reference.collection(\"orderProductItems\")\r\n                    val productSnapshot = orderProductItemsRef\r\n                        .whereEqualTo(\"productDocId\", productDocId)  // 특정 상품만 필터링\r\n                        .get()\r\n                        .await()\r\n\r\n                    // 해당 주문에 포함된 특정 상품의 개수를 합산\r\n                    orderCount += productSnapshot.documents.size\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n\r\n            Log.d(\"test333\", \"사용자($userId)가 상품을($productDocId)주문한 횟수: ${orderCount}\")\r\n\r\n            return orderCount\r\n\r\n        }\r\n\r\n    }\r\n    // sehoon userDocID로 리뷰 정보 가져오기\r\n    suspend fun getAllReview(): List<MyReviewParent> {\r\n        val firestore = FirebaseFirestore.getInstance()\r\n        val collectionReference = firestore.collection(\"reviewData\")\r\n        val reviewResult = mutableListOf<MyReviewParent>()\r\n\r\n        try {\r\n            val reviewSnapshot = collectionReference\r\n                .orderBy(\"reviewTimeStamp\", Query.Direction.DESCENDING) // Firestore에서 직접 정렬\r\n                .get()\r\n                .await()\r\n\r\n            Log.d(\"Firestore\", \"총 가져온 문서 개수: ${reviewSnapshot.documents.size}\")\r\n\r\n            for (document in reviewSnapshot) {\r\n                Log.d(\"Firestore\", \"문서 데이터: ${document.data}\")\r\n\r\n                val review = document.toObject(MyReviewParent::class.java)\r\n                reviewResult.add(review)\r\n                Log.d(\"Firestore\", \"변환된 객체: $review\")\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        return reviewResult\r\n    }\r\n\r\n    // sehoon userDocID로 리뷰 정보 가져오기\r\n    suspend fun getUserReview(userDocId: String): List<MyReviewParent> {\r\n        val firestore = FirebaseFirestore.getInstance()\r\n        val collectionReference = firestore.collection(\"reviewData\")\r\n        val reviewResult = mutableListOf<MyReviewParent>()\r\n\r\n        try {\r\n            val reviewSnapshot = collectionReference\r\n                .whereEqualTo(\"reviewCustomerDocId\", userDocId)\r\n                .orderBy(\"reviewTimeStamp\", Query.Direction.DESCENDING) // Firestore에서 직접 정렬\r\n                .get()\r\n                .await()\r\n\r\n            Log.d(\"Firestore\", \"총 가져온 문서 개수: ${reviewSnapshot.documents.size}\")\r\n\r\n            for (document in reviewSnapshot) {\r\n                Log.d(\"Firestore\", \"문서 데이터: ${document.data}\")\r\n\r\n                val review = document.toObject(MyReviewParent::class.java)\r\n                reviewResult.add(review)\r\n                Log.d(\"Firestore\", \"변환된 객체: $review\")\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        return reviewResult\r\n    }\r\n\r\n    // sh reviewDocId가 일치하는 reviewData 제거\r\n    suspend fun removeUserReview(reviewDocId: String): Boolean {\r\n        val firebase = FirebaseFirestore.getInstance()\r\n        val collectionReference = firebase.collection(\"reviewData\")\r\n\r\n        return try {\r\n            val documents =\r\n                collectionReference.whereEqualTo(\"reviewDocId\", reviewDocId).get().await()\r\n\r\n            if (documents.isEmpty) {\r\n                return false\r\n            }\r\n            for (document in documents) {\r\n                collectionReference.document(document.id).delete().await()\r\n            }\r\n            true\r\n        } catch (_: Exception) {\r\n            false\r\n        }\r\n    }\r\n\r\n\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/example/frume/repository/ReviewRepository.kt b/app/src/main/java/com/example/frume/repository/ReviewRepository.kt
--- a/app/src/main/java/com/example/frume/repository/ReviewRepository.kt	(revision 160c79a1219f7fd011726c93d0285a01746d24ef)
+++ b/app/src/main/java/com/example/frume/repository/ReviewRepository.kt	(date 1738630566969)
@@ -1,5 +1,6 @@
 package com.example.frume.repository
 
+
 import android.net.Uri
 import android.util.Log
 import com.example.frume.data.MyReviewParent
